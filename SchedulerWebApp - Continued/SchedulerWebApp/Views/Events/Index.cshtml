@model IEnumerable<SchedulerWebApp.Models.Event>

@{
    ViewBag.Title = "Index";
}

<style type="text/css">
    .eventPageIcons {
        font-size: 1.5em;
    }

    p {
        font-size: 16px;
    }
</style>


<ul class="nav nav-tabs nav-justified" id="myTab">
    <li role="presentation" class="active tab-header">
        <a href="#upcomingEvent" role="tab" data-toggle="tab">Upcoming Events</a>
    </li>
    <li role="presentation" class="tab-header">
        <a href="#passedEvent" role="tab" data-toggle="tab">Previous Events</a>
    </li>
    <li role="presentation" class="tab-header">
        <a href="#allEvents" role="tab" data-toggle="tab">All Events</a>
    </li>
</ul>

<div class="tab-content">

    <div id="upcomingEvent" class="tab-pane fade in active">
        <div class="row ">
            <div class="masonry-container">
                @Html.Action("UpcomingEvents", "Events")
            </div>
        </div>
    </div>

    <div id="passedEvent" class="tab-pane fade">
        <div class="row">
            <div class="masonry-container">
                @Html.Action("PreviousEvents", "Events")
            </div>
        </div>
    </div>

    <div id="allEvents" class="tab-pane fade">
        <div class="row">
            <div class="masonry-container">
                @Html.Action("AllEvents", "Events")
            </div>
        </div>
    </div>

</div>


@section scripts
{
    <script src="https://npmcdn.com/masonry-layout@4.0/dist/masonry.pkgd.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://maps.google.com/maps/api/js?sensor=true"></script>

    <script type="text/javascript">
        //#region Masonry(arrange event divs)
        var container = $('.masonry-container');

        $(window).bind("load", function () {
            addMasonry(container);
        });

        $(document).ready(function () {

            $('a[data-toggle=tab]').on('click', adjustHeight);

            createMap(".caption", ".location");

            $('a[data-toggle=tab]').each(function () {
                var self = $(this);
                self.on('shown.bs.tab', function () {
                    addMasonry(container);
                    fixContainerHeight();
                });
            });

            //#endregion
        });

        function addMasonry(masonryContainer) {
            masonryContainer.masonry({
                columnWidth: '.masonry-item',
                itemSelector: '.masonry-item'
            });
        }

        toolTipInit();

        (function () {

            trimOnSmallScreens();

            function trimText(elementSelector, maxCharacter) {
                $(elementSelector).each(function () {
                    var header = $.trim($(this).text());

                    if (header.length > maxCharacter) {
                        $(this).text(header.substr(0, maxCharacter) + "...");
                    }
                });
            }

            function trimOnSmallScreens() {
                var width = $(window).width();
                if (width < 768) {
                    trimText(".p-header", 10);
                } else {
                    trimText(".p-header", 15);
                }
            }


        })();

    </script>
}