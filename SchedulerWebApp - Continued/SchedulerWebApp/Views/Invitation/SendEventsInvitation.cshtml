@model SchedulerWebApp.Models.ViewModels.InvitationViewModel

@{
    ViewBag.Title = "Invite Participant";
}
@Styles.Render("~/Content/tagIt")
<div class="col-md-8 col-md-offset-2">
    <h2>@Model.EventTitle</h2>
    <h4>Add participants</h4>
    <hr />
    <div class="row">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.EventId)
                @Html.HiddenFor(model => model.EventDate)
                <div class="table-responsive">
                    <table class="table borderless table-responsive">
                        <colgroup>
                            <col class="col-sm-3" />
                            <col class="col-sm-9" />
                        </colgroup>
                        <tbody>
                            <tr>
                                <td class="title-label ">@Html.DisplayNameFor(model => model.EventTitle): </td>
                                <td>@Html.DisplayFor(model => model.EventTitle)</td>
                            </tr>
                            <tr>
                                <td class="title-label ">@Html.DisplayNameFor(model => model.EventLocation): </td>
                                <td>@Html.DisplayFor(model => model.EventLocation)</td>
                            </tr>
                            <tr>
                                <td class="title-label">@Html.DisplayNameFor(model => model.EventDate): </td>
                                <td>@Html.DisplayFor(model => model.EventDate)</td>
                            </tr>

                            <tr>
                                <td class="title-label">
                                    @Html.DisplayNameFor(model => model.ListDate) :
                                </td>
                                <td>
                                    <div id="listDateContainer">
                                        @Html.EditorFor(model => model.ListDate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datePickerList" } })
                                        @Html.ValidationMessageFor(model => model.ListDate, "", new { @class = "text-danger" })
                                    </div>

                                </td>
                            </tr>
                            <tr>
                                <td class="title-label">
                                    @Html.DisplayNameFor(model => model.ReminderDate) :
                                </td>
                                <td>
                                    <div id="remeinderDateContainer">
                                        @Html.EditorFor(model => model.ReminderDate, new { htmlAttributes = new { @class = "form-control datepicker ", id = "datePickerRemainder" } })
                                        @Html.ValidationMessageFor(model => model.ReminderDate, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                            </tr>

                            <tr>
                                <td class="title-label">
                                    @Html.DisplayNameFor(model => model.ParticipantsEmails) :
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.ParticipantsEmails, new { htmlAttributes = new { @class = "form-control ", placeholder = "Enter Emails separated by comma" } })
                                    @Html.ValidationMessageFor(model => model.ParticipantsEmails, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <td class="title-label">
                                    @Html.LabelFor(model => model.SendRemainder)
                                </td>
                                <td>
                                    @Html.CheckBoxFor(model => model.SendRemainder)
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-7">
                        <div class="col-md-5 col-md-offset-2">
                            @Html.ActionLink("Cancel", null, null, null, new { @class = "btn btn-primary btn-block", href = Request.UrlReferrer })
                        </div>
                        <div class="col-md-5 ">
                            <input type="submit" value="Invite" class="btn btn-primary btn-block" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/tagIt")
    @Scripts.Render("~/bundles/dateTimePicker")
    @Scripts.Render("~/bundles/custom")




    <script type="text/javascript">

        $(function () {

            initTagIt();

            linkTwoInputs('datePickerList', 'datePickerRemainder');
        });

        function inputInit(elementId) {

            var todaysDate = moment(new Date());
            var element = '#' + elementId;

            $(element).datetimepicker({
                format: "DD.MM.YYYY HH:mm",
                minDate: todaysDate.subtract(0, 'days').startOf('day')
            });
        }

        function linkTwoInputs(firstInput, secondInput) {

            var firstInputId = '#' + firstInput;
            var secondInputId = '#' + secondInput;

            $(firstInputId).datetimepicker({
                format: "DD.MM.YYYY HH:mm",
                minDate: todaysDate.subtract(0, 'days').startOf('day')
            });

            $(secondInputId).datetimepicker({
                format: "DD.MM.YYYY HH:mm",
                useCurrent: false //Important! See issue #1075
            });
            $(firstInputId).on("dp.change", function (e) {
                $(secondInputId).data("DateTimePicker").minDate(e.date);
            });
            $(secondInputId).on("dp.change", function (e) {
                $(firstInputId).data("DateTimePicker").maxDate(e.date);
            });
        }

        function initTagIt() {
            $("#ParticipantsEmails").tagit({
                placeholderText: " separate by comma.. ",
                autocomplete: ({
                    source: function (request, response) {
                        $.ajax({
                            url: '@Url.Action("SearchContact", "Contacts")',
                            dataType: "json",
                            data: { term: request.term },
                            success: function (data) {
                                response(data);
                            }
                        });
                    }
                })
            });
        }
        
        setDatesInCorrectFormat();

        AllowValidationOnHiddenInputs();

    </script>
}